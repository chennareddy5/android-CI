name: Android CI and CD

on:
  push:
    branches:
      - main
      - qa 
      - develop
  pull_request:
    branches:
      - main
      - qa

env:
  AWS_DEFAULT_REGION: "us-east-1"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x android-demo-app/gradlew

      - name: Build with Gradle
        working-directory: android-demo-app
        run: ./gradlew build

      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Date and Time
        id: date
        run: echo "::set-output name=current_date_time::$(date +'%d-%m-%Y-%H-%M-%S')"

      - name: Build and analyze with SonarQube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONARTOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONARHOST }}
          CURRENT_DATE_TIME: ${{ steps.date.outputs.current_date_time }}
        run: |
          echo "Current date and time: $CURRENT_DATE_TIME"
          cd android-demo-app && ./gradlew build sonar --info 
      - name: Copy APK files to a directory
        run: |
          mkdir -p ${{ github.workspace }}/apk-files/debug ${{ github.workspace }}/apk-files/release
          cp android-demo-app/app/build/outputs/apk/dev/debug/app-dev-debug.apk ${{ github.workspace }}/apk-files/debug/app-debug-${{ steps.date.outputs.current_date_time }}.apk
          cp android-demo-app/app/build/outputs/apk/dev/release/app-dev-release-unsigned.apk ${{ github.workspace }}/apk-files/release/app-release-unsigned-${{ steps.date.outputs.current_date_time }}.apk
      - name: Upload apk-files Directory
        uses: actions/upload-artifact@v3
        with:
          name: apk-files-artifacts
          path: ${{ github.workspace }}/apk-files/
          if-no-files-found: ignore

  notification:
    name: Notification to Teams
    runs-on: ubuntu-latest
    steps:
      - name: Send notification to Teams
        uses: toko-bifrost/ms-teams-deploy-card@master
        if: always()
        with:
          github-token: ${{ secrets.CI_GITHUB_TOKEN }}
          webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: contains(github.ref, 'refs/heads/qa') || contains(github.ref, 'refs/heads/main')
    steps:
      - name: Check out Git Repository
        uses: actions/checkout@v2

      - name: Download apk-files-artifacts
        uses: actions/download-artifact@v3
        with:
          name: apk-files-artifacts
          path: ${{ github.workspace }}/apk-files/

      - name: Display structure of downloaded files of Artifact 
        run: ls -R
        working-directory: ${{ github.workspace }}/apk-files/

      - name: Public IP of Github Hosted Runner
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.JFROG_SG_ID }} --protocol tcp --port 8082 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'

      - uses: jfrog/setup-jfrog-cli@v3
        with:
          version: latest
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Create folder for qa and master branch in apk-files
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/qa' ]]; then
            cd ${{ github.workspace }}/apk-files && mkdir -p qa && mv debug/ qa/ && mv release/ qa/
          elif [[ ${{ github.ref }} == 'refs/heads/master' ]]; then
            cd ${{ github.workspace }}/apk-files && mkdir -p master && mv debug/ master/ && mv release/ master/
          fi
      - name: Upload APK files to JFrog
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/qa' ]]; then
            jfrog rt u --url ${{ secrets.JF_URL }} --user ${{ secrets.JF_USER }} --password ${{ secrets.JF_PASSWORD }} apk-files/qa/debug/app-debug-${{ needs.build.outputs.CURRENT_DATE_TIME }}.apk android-artifact/
            jfrog rt u --url ${{ secrets.JF_URL }} --user ${{ secrets.JF_USER }} --password ${{ secrets.JF_PASSWORD }} apk-files/qa/release/app-release-unsigned-${{ needs.build.outputs.CURRENT_DATE_TIME }}.apk android-artifact/
          elif [[ ${{ github.ref }} == 'refs/heads/master' ]]; then
            jfrog rt u --url ${{ secrets.JF_URL }} --user ${{ secrets.JF_USER }} --password ${{ secrets.JF_PASSWORD }} apk-files/master/debug/app-debug-${{ needs.build.outputs.CURRENT_DATE_TIME }}.apk android-artifact/
            jfrog rt u --url ${{ secrets.JF_URL }} --user ${{ secrets.JF_USER }} --password ${{ secrets.JF_PASSWORD }} apk-files/master/release/app-release-unsigned-${{ needs.build.outputs.CURRENT_DATE_TIME }}.apk android-artifact/
          fi
